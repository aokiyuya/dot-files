" __  __                     _          _    __ _
" \ \/ /__  __ __  __ ____ _( )_____   | |  / /(_)____ ___   _____ _____
"  \  // / / // / / // __ `/|// ___/   | | / // // __ `__ \ / ___// ___/
"  / // /_/ // /_/ // /_/ /  (__  )    | |/ // // / / / / // /   / /__
" /_/ \__,_/ \__, / \__,_/  /____/     |___//_//_/ /_/ /_//_/    \___/
"          /____/
" my vim settings
"
" Author: Yuya Aoki

"settings to use multi byte character
set encoding=utf-8
scriptencoding utf-8

" 行数表示
set number
" swapfileを作らない
set noswapfile
" コマンド打つ場所の高さ
set cmdheight=2
" ファイル名表示
set title
" コマンドでも補完がきくように
set wildmenu
" 小文字で検索したとき大文字小文字を無視する
set ignorecase
" 検索キーワードが大文字を含む時だけ🐛
set smartcase
" 検索結果にハイライトをかける
set hlsearch
" インクリメント検索
set incsearch
" カーソルで行をまたげるようにする
set whichwrap=b,s,h,l,<,>,[,]
" tabなどを可視化する
set list
set listchars=tab:>-,extends:<,trail:-
" バックスペースでindent, end of low, startを削除できるように
set backspace=indent,eol,start
" タブ幅4
set tabstop=4
set shiftwidth=4
" マルチバイト用()
set ambiwidth=double
" pathに各拡張子用の設定を書いた物を追加
set runtimepath+=~/.vim/,~/.vim/ftplugin/
" エンコーディングの設定
set fileencodings=utf-8,euc-jp,sjis,iso-2022-jp
" もしutf-8ですべてのファイルを管理したければ
set fileencoding=utf-8
" この優先順位でファイルを保存する形式を決める
set fileformats=unix,dos,mac
" 256色描画
set t_Co=256
" Space をLeader にしてみる
let g:mapleader = "\<Space>"
" クリップボード連携したい
set clipboard+=unnamed



" mapはキー設定
" nnoremap が normal mode,
" inoremap が insert mode,
" cnoremap が command line mode
" Space w で保存 Space q で終了
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap ; :
" Space SpaceでVisual Line
nnoremap <Leader><Leader> V
" 不要なウィンドウのポップアップを抑制
nnoremap q: :q

inoremap [ []<LEFT>
inoremap { {}<LEFT>
inoremap ( ()<LEFT>



" OSの判定
if has('win32')
	let ostype = "Win"
elseif has('mac')
	let ostype = "Mac"
	set shell=sh
else
	let ostype = system("uname")
	set shell=sh
endif

" put esc-key for delete highlight
nmap <silent> <Esc><Esc> :nohlsearch<CR>

" reset augroup
augroup MyAutoCmd
  autocmd!
augroup END

" road template
autocmd BufNewFile *.py 0r $HOME/.vim/template/template.py
autocmd BufNewFile *.cpp 0r $HOME/.vim/template/template.cpp
autocmd BufNewFile *.c 0r $HOME/.vim/template/template.cpp
autocmd BufNewFile *.sh 0r $HOME/.vim/template/template.sh
autocmd BufNewFile *.tex 0r $HOME/.vim/template/template.tex


" 引用 by https://github.com/Shougo/shougo-s-github/blob/master/vim/rc/vimrc
function! s:source_rc(path, ...) abort "{{{
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif
  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute 'source' fnameescape(tempfile)
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction
"}}}


" dein.rc.vimを読み込む
call s:source_rc('dein.rc.vim')


" if vim8.0 or latest, Disable packpath
if v:version >= 800
  set packpath=
endif

" 引数なしでvimを開くとNERDTreeを起動
let file_name = expand('%')
if has('vim_starting') &&  file_name == ''
  autocmd VimEnter * NERDTree ./
endif

" neosnippet
" SuperTab like snippets behavior.
" shift tabでジャンプできるようにする設定
imap <expr><S-TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><S-TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" status bar
set laststatus=2

" 透過用処理らしい
highlight Normal ctermbg=none

filetype plugin indent on
syntax on


" \ \/ /__  __ __  __ ____ _( )_____   | |  / /(_)____ ___   _____ _____
"  \  // / / // / / // __ `/|// ___/   | | / // // __ `__ \ / ___// ___/
"  / // /_/ // /_/ // /_/ /  (__  )    | |/ // // / / / / // /   / /__
" /_/ \__,_/ \__, / \__,_/  /____/     |___//_//_/ /_/ /_//_/    \___/
"           /____/
" my vim settings
"
" Author: Yuya Aoki
" Final update: 2017-05-02 11:22:31

"settings to use multi byte character
set encoding=utf-8
scriptencoding utf-8

" 行数表示
set number
" swapfileを作らない
set noswapfile
" コマンド打つ場所の高さ
set cmdheight=2
" ファイル名表示
set title
" コマンドでも補完がきくように
set wildmenu
" 小文字で検索したとき大文字小文字を無視する
set ignorecase
" 検索キーワードが大文字を含む時だけ🐛
set smartcase
" 検索結果にハイライトをかける
set hlsearch
" インクリメント検索
set incsearch
" カーソルで行をまたげるようにする
set whichwrap=b,s,h,l,<,>,[,]
" tabなどを可視化する
set list
set listchars=tab:>-,extends:<,trail:-
" バックスペースでindent, end of low, startを削除できるように
set backspace=indent,eol,start
" タブ幅4
set tabstop=4
set shiftwidth=4
" マルチバイト用()
set ambiwidth=double
" pathに各拡張子用の設定を書いた物を追加
set runtimepath+=~/.vim/,~/.vim/ftplugin/
" エンコーディングの設定
set fileencodings=utf-8,euc-jp,sjis,iso-2022-jp
" もしutf-8ですべてのファイルを管理したければ
set fileencoding=utf-8
" この優先順位でファイルを保存する形式を決める
set fileformats=unix,dos,mac
" 256色描画
set t_Co=256
" Space をLeader にしてみる
let g:mapleader = "\<Space>"
" クリップボード連携
set clipboard+=unnamed
" show match
set showmatch
" input match ( Ex. (,[,", and other ) time * 0.1 sec
set matchtime=1
" length of complete list
set pumheight=10


" mapはキー設定
" nnoremap が normal mode,
" inoremap が insert mode,
" cnoremap が command line mode
" etc. etc.
" Space w で保存 Space q で終了
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
" for US key
" nnoremap ; :
" Space SpaceでVisual Line
nnoremap <Leader><Leader> V
" 打ち間違い is うっとおしい
nnoremap q: :q
" +-で数字増えたり減ったりするよ
nnoremap + <C-a>
nnoremap - <C-x>

" <>をうつのが面倒なので矢印で代替するよ><
nnoremap <right> >>
nnoremap <left> <<
nnoremap > >>
nnoremap < <<
vnoremap <right> >
vnoremap <left> <

" <C-f><C-b>が直感的でないので<C-j><C-k>で代替
nnoremap <C-j> <C-f>
nnoremap <C-k> <C-b>

" 実際の行でなく表示されてる行で移動を考える
nnoremap j gj
nnoremap gj j
nnoremap k gk
nnoremap gk h

" $,0はポインタだが直感的でないので変更
nnoremap <C-l> $
nnoremap <C-h> 0

" 対応する括弧を自動入力
inoremap { {}<LEFT>
inoremap < <><LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>

" みんなやってるのでためしに導入してみる
inoremap jj <ESC>
" 同じノリで検索に移る
" inoremap ff <ESC>/
" ファイナルファンタジーでよく使うので廃止
inoremap <C-f> <ESC>/

" 空行挿入
nnoremap <Leader>o o<ESC>
nnoremap <Leader>O O<ESC>

" I don't use EX MODE
nnoremap Q <Nop>

" 怖いので誤作動をなくす
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>

" .とhjklを素早く打ち込みたい時に手の移動が面倒なので試験的に
nnoremap z .

" 画面分割
nnoremap <Leader>s :vsplit<CR>

" 画面移動
nnoremap <Leader>l <C-w>l
nnoremap <Leader>j <C-w>j
nnoremap <Leader>h <C-w>h
nnoremap <Leader>k <C-w>k

" 使いにくいキーを置換
nnoremap m %
" t を全然使わないのでバッファの移動に割り当て
nnoremap t gf
nnoremap T <C-^>

" 本来押しにくいけど慣れすぎて頻繁に押せるキーを置換
nnoremap <CR> o
" こいつはちょっと考え物
" nnoremap <BS> X
" <C-h>がつぶれるので廃止

" 括弧の後ろまで飛んで編集したい
inoremap <C-w> <Esc>l%a

" *をより簡単に
nnoremap <Space>/ *

nnoremap <Leader>d a<C-r>=strftime('%Y-%m-%d')<Return><Esc>
nnoremap <Leader>t a<C-r>=strftime('%H:%M:%S')<Return><Esc>

" OSの判定
if has('win32')
	let ostype = 'Win'
elseif has('mac')
	let ostype = 'Mac'
	set shell=sh
else
	let ostype = system('uname')
	set shell=sh
endif


" put esc-key for delete highlight
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>

" reset augroup
augroup MyAutoCmd
  autocmd!
augroup END

" road template
autocmd MyAutoCmd BufNewFile *.py 0r $HOME/.vim/template/template.py
autocmd MyAutoCmd BufNewFile *.cpp 0r $HOME/.vim/template/template.cpp
autocmd MyAutoCmd BufNewFile *.c 0r $HOME/.vim/template/template.cpp
autocmd MyAutoCmd BufNewFile *.sh 0r $HOME/.vim/template/template.sh
autocmd MyAutoCmd BufNewFile *.tex 0r $HOME/.vim/template/template.tex
autocmd MyAutoCmd BufNewFile 201[0-9]-[01][0-9]-[0-3][0-9].md 0r $HOME/tmp/template.md

" 引用 by https://rcmdnk.com/blog/2017/03/10/computer-mac-vim/
" これでIME無効化できるはずだよ
if has('mac')
  set ttimeoutlen=1
  let g:imeoff = 'osascript -e "tell application \"System Events\" to key code 102"'
  augroup MyIMEGroup
    autocmd!
    autocmd InsertLeave * :call system(g:imeoff)
  augroup END
  noremap <silent> <ESC> <ESC>:call system(g:imeoff)<CR>
endif



" 引用 by https://github.com/Shougo/shougo-s-github/blob/master/vim/rc/vimrc
function! s:source_rc(path, ...) abort "{{{
  let use_global = get(a:000, 0, !has('vim_starting'))
  let abspath = resolve(expand('~/.vim/rc/' . a:path))
  if !use_global
    execute 'source' fnameescape(abspath)
    return
  endif
  " substitute all 'set' to 'setglobal'
  let content = map(readfile(abspath),
        \ 'substitute(v:val, "^\\W*\\zsset\\ze\\W", "setglobal", "")')
  " create tempfile and source the tempfile
  let tempfile = tempname()
  try
    call writefile(content, tempfile)
    execute 'source' fnameescape(tempfile)
  finally
    if filereadable(tempfile)
      call delete(tempfile)
    endif
  endtry
endfunction
"}}}


" dein.rc.vimを読み込む
call s:source_rc('dein.rc.vim')


" if vim8.0 or latest, Disable packpath
if v:version >= 800
  set packpath=
endif

" 引数なしでvimを開くとNERDTreeを起動
let file_name = expand('%')
if has('vim_starting') &&  file_name ==? ''
  autocmd MyAutoCmd VimEnter * NERDTree ./
endif

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" status bar
set laststatus=2

" 透過用処理らしい
highlight Normal ctermbg=none

filetype plugin indent on
syntax on

